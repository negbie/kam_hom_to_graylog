#!KAMAILIO
#
#!substdef "!HOMER_DB_USER!homer!g"
#!substdef "!HOMER_DB_PASSWORD!PW!g"
#!substdef "!HOMER_DB_HOST!127.0.0.1!g"
#!substdef "!HOMER_LISTEN_PROTO!udp!g"
#!substdef "!HOMER_LISTEN_IF!0.0.0.0!g"
#!substdef "!HOMER_LISTEN_PORT!9060!g"
#!substdef "!CHECK_TIMER_INTERVAL!1!g"
##!substdef "!ELASTICSEARCH_URL!http://127.0.0.1:9200!g"
#!substdef "!GRAYLOG_GELF_HTTP_URL!http://127.0.0.1:12201!g"

####### Global Parameters #########

debug=-2
log_stderror=no

memdbg=5
memlog=5
maxbuffer=134190336

##!define WITH_HOMER_GEO
##!define TO_ELASTIC
#!define WITH_X_RTP_STATS
#!define TO_GRAYLOG

log_facility=LOG_LOCAL1

fork=yes
children=8

/* uncomment the next line to disable TCP (default on) */
disable_tcp=yes

/* IP and port for HEP capturing) */
listen=HOMER_LISTEN_PROTO:HOMER_LISTEN_IF:HOMER_LISTEN_PORT

#Max loops
max_while_loops=256
#mpath="/usr/local/lib64/kamailio/modules"
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

loadmodule "pv.so"
loadmodule "db_mysql.so"
loadmodule "sipcapture.so"
loadmodule "textops.so"
loadmodule "rtimer.so"
loadmodule "xlog.so"
loadmodule "sqlops.so"
loadmodule "htable.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "siputils.so"
loadmodule "jansson.so"
loadmodule "http_async_client.so"
loadmodule "ipops.so"
loadmodule "ctl.so"
loadmodule "kex.so"

#!ifdef WITH_HOMER_GEO
loadmodule "geoip.so"
#!endif
# invite calls table
modparam("htable", "htable", "a=>size=8")
# sipcapture rm,rs,cs,ci table
modparam("htable", "htable", "b=>size=14;autoexpire=120")
# invite callid table
modparam("htable", "htable", "c=>size=8")
# response table
modparam("htable", "htable", "e=>size=8;autoexpire=5")
# geoip table
modparam("htable", "htable", "g=>size=8")
# bye callid table
modparam("htable", "htable", "j=>size=8")
# kpi table
modparam("htable", "htable", "k=>size=8")
# method table
modparam("htable", "htable", "m=>size=8")
# response table
modparam("htable", "htable", "r=>size=8")
# warning table
modparam("htable", "htable", "w=>size=9")
#!ifdef WITH_X_RTP_STATS
# callid+totag table to avoid double messages
modparam("htable", "htable", "x=>size=9;autoexpire=5")
#!endif
# avoid double messages table
modparam("htable", "htable", "y=>size=14;autoexpire=5")
# avoid double messages table
modparam("htable", "htable", "z=>size=14;autoexpire=5")

modparam("htable", "timer_interval", 5)

modparam("rtimer", "timer", "name=ta;interval=CHECK_TIMER_INTERVAL;mode=1;")
modparam("rtimer", "exec", "timer=ta;route=CHECK_STATS")

modparam("sqlops","sqlcon","cb=>mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@127.0.0.1/homer_statistic")

# ----- mi_fifo params -----

####### Routing Logic ########
modparam("sipcapture", "db_url", "mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@127.0.0.1/homer_data")
modparam("sipcapture", "capture_on", 1)
modparam("sipcapture", "hep_capture_on", 1)
modparam("sipcapture", "insert_retries", 4)
modparam("sipcapture", "insert_retry_timeout", 5)
#modparam("sipcapture", "capture_node", "homer01")

modparam("http_async_client", "workers", 8)
modparam("http_async_client", "hash_size", 8192)

#!ifdef WITH_HOMER_GEO
modparam("geoip", "path", "/usr/share/GeoIP/GeoLiteCity.dat")
#!endif

# Main SIP request routing logic - processing of any incoming SIP request starts with this route
request_route {

	# Avoid double messages. This could happen if you have many optical taps
	if($sht(y=>$sel(@v[1].branch)::$ci::$cs::$rm)) exit;
	$sht(y=>$sel(@v[1].branch)::$ci::$cs::$rm) = 1;

	if($sht(b=>$rm::$cs::$ci) != $null) {
		route(STORE);
		drop;
	}

	$sht(b=>$rm::$cs::$ci) = 1;

	if (is_method("INVITE|REGISTER")) {


		if($au != $null) $var(a_number) = $au;
		else $var(a_number) = $fU;

		if($rU != $null) $var(b_number) = $rU;
		else $var(b_number) = $tU;

		if($ua =~ "(eyeBeam|friendly-scanner|sipvicious|sipcli|VaxSIPUserAgent)") {
			$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=scanner);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if (starts_with("$var(a_number)", "+204231")) {
			$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=mallicious_user);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if (starts_with("$var(b_number)", "+204231")) {
			$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=mallicious_user);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if($var(a_number) =~ "(\$)|(\-)|(\=)|(\#)|(\%27)|(\%24)|(\/)") {
			$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=mallicious_string);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		# comment this out if you have alphanumeric hostnames
		if(!($sel(contact.uri.host) =~ "^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})$") && $ct != $null) {
			$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=contact_alphabetic);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}
		# last $si should be your loadbalancer ip to avoid false warnings
		if($sel(contact.uri.host) != $si && $ct != $null && $si != "192.168.1.1") {
			$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=contact_missmatch);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		#if($(hdr(Record-Route)[0]{nameaddr.uri}) != $si && $hdr(Record-Route) != $null) {
		#	$var(warning) = $_s(warning=$ci=$rm=$var(a_number)=$var(b_number)=$si=$sel(via[1].host)=route_missmatch);
		#	if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
		#	$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		#}

	#!ifdef WITH_HOMER_GEO
		if(geoip_match("$si", "src")) {
			$var(key) = $rm + "=" + $gip(src=>cc) + "=" + $gip(src=>lat) + "=" + $gip(src=>lon);
			if($sht(g=>$var(key)) != $null) $sht(g=>$var(key)) = 0;
			$sht(g=>$var(key)) = $sht(g=>$var(key)) + 1;
		}
	#!endif

		if (is_method("INVITE")) {
			if ($(ci{s.substr,-6,0}) != "_b2b-1") $sht(c=>$ci) = 1;

			if (has_totag()) {
				if($sht(m=>REINVITE) == $null) $sht(m=>REINVITE) = 0;
				$sht(m=>REINVITE) = $sht(m=>REINVITE) + 1;
			}
			else {
				if($sht(m=>INVITE) == $null) $sht(m=>INVITE) = 0;
				$sht(m=>INVITE) = $sht(m=>INVITE) + 1;

				if($adu != $null) {
					# only invites with a URI from Authorization or Proxy-Authorization header
					if($sht(m=>INVITE-AUTH) == $null) $sht(m=>INVITE-AUTH) = 0;
					$sht(m=>INVITE-AUTH) = $sht(m=>INVITE-AUTH) + 1;
				}
			}
		}
		else {
			if($sht(m=>REGISTER) == $null) $sht(m=>REGISTER) = 0;
			$sht(m=>REGISTER) = $sht(m=>REGISTER) + 1;

			if($adu != $null) {
				if($sht(m=>REGISTER-AUTH) == $null) $sht(m=>REGISTER-AUTH) = 0;
				$sht(m=>REGISTER-AUTH) = $sht(m=>REGISTER-AUTH) + 1;
			}
		}
	}
	else if (is_method("ACK|BYE|CANCEL|INFO|MESSAGE|NOTIFY|OPTIONS|PRACK|PUBLISH|REFER|SUBSCRIBE|UPDATE")) {

		if($sht(m=>$rm) == $null) $sht(m=>$rm) = 0;
		$sht(m=>$rm) = $sht(m=>$rm) + 1;

		if(is_present_hf("Reason")) {
			$var(cause) = $(hdr(Reason){param.value,cause}{s.int});
			if($var(cause) != 16 && $var(cause) !=17) {
				if($sht(k=>kpi::sdf) == $null) $sht(k=>kpi::sdf) = 0;
				$sht(k=>kpi::sdf) = $sht(k=>kpi::sdf) + 1;
			}
		}

		if($cT == "application/vq-rtcpxr" && $(rb{s.substr,0,1}) != "x") {
			$var(table) = "report_capture";
			#$var(callid) = $(rb{re.subst,/(.*)CallID:([0-9A-Za-z_.@-]{5,120})(.*)$/\2/s});
			$var(callid) = $(rb{re.subst,/.*CallID:([0-9A-Za-z@-_\.]{5,120}).*$/\1/s});
			report_capture("$var(table)", "$var(callid)", "$mb");
			#report_capture("$var(table)", "$var(callid)");
			drop;
		}
	}
	else {
		if($sht(m=>UNKNOWN) == $null) $sht(m=>UNKNOWN) = 0;
		$sht(m=>UNKNOWN) = $sht(m=>UNKNOWN) + 1;
	}

#!ifdef WITH_X_RTP_STATS
	if(is_method("BYE") && $hdr(X-RTP-Stat) != $null) route(PARSE_X_RTP_STATS);
#!endif

	#Store
	route(STORE);
	drop;
}

reply_route {

	# Avoid double messages. This could happen if you have many optical taps
	if($sht(z=>$sel(@v[1].branch)::$ci::$cs::$rs)) exit;
	$sht(z=>$sel(@v[1].branch)::$ci::$cs::$rs) = 1;

	if($sht(b=>$rs::$cs::$rm::$ci) != $null) {
		#Store
		route(STORE);
		drop;
	}

	$sht(b=>$rs::$cs::$rm::$ci) = 1;

	#Status codes
	if(status =~ "[1-7][0-9][0-9]") {
		if($sht(r=>$rs::$rm) == $null) $sht(r=>$rs::$rm) = 0;
		$sht(r=>$rs::$rm) = $sht(r=>$rs::$rm) + 1;
	}

	if($rm == "INVITE") {
		#ISA
		if(status =~ "^(408|50[012345])$") {
			if($sht(k=>kpi::isa) == $null) $sht(k=>kpi::isa) = 0;
			$sht(k=>kpi::isa) = $sht(k=>kpi::isa) + 1;

			# we need the to-header here
			$var(warning) = $_s(isa=$ci=$rs=$fU=$tU=$si=$sel(via[1].host)=server);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}
		#Bad
		if(status =~ "^(486|487|603)$") {
			if($sht(k=>kpi::bad) == $null) $sht(k=>kpi::bad) = 0;
			$sht(k=>kpi::bad) = $sht(k=>kpi::bad) + 1;
		}
		#SD
		if(status =~ "^(50[034])$") {
			if($sht(k=>kpi::sd) == $null) $sht(k=>kpi::sd) = 0;
			$sht(k=>kpi::sd) = $sht(k=>kpi::sd) + 1;
		}
		if (status == "200") {
			if($sht(a=>$ci::$fU::$tU) == $null) $sht(a=>$ci::$fU::$tU) = 0;
			$sht(a=>$ci::$fU::$tU) = $sht(a=>$ci::$fU::$tU) + 1;
		}
	}
	else if($rm == "REGISTER") {

		if(status == "401") {
			if($sht(e=>$ci) == $null) $sht(e=>$ci) = 0;
			$sht(e=>$ci) = $sht(e=>$ci) + 1;
		}

		# $si should be your sbc secure ip but its optinal. $fu should be numeric. just remove it if you dont need it.
		if($sht(e=>$ci) > 3 || status == "403" || !($fU =~ "^([0-9]+|\+[0-9]+)$")) {
			$var(warning) = $_s(error=$ci=$rs=$fU=$tU=$si=$sel(via[1].host)=register);
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}
	}
	else if($rm == "BYE") {
		if ($(ci{s.substr,-6,0}) != "_b2b-1") $sht(j=>$ci) = 1;
	}

#!ifdef WITH_X_RTP_STATS
	if(($rm == "BYE" || status == "200") && $hdr(X-RTP-Stat) != $null) route(PARSE_X_RTP_STATS);
#!endif

	#Store
	route(STORE);
	drop;
}

#!ifdef WITH_X_RTP_STATS
route[PARSE_X_RTP_STATS] {

	# Include the to-tag here to get x-rtp-stats from caller and callee if they send them
	if($sht(x=>$ci::$tt)>=1) {
		return;
	}

	if($hdr(X-RTP-Stat) != $null) {
		$var(xrtp_stats) = "";
		$var(type)  = "xrtp_stats";
		$var(XHEAD) = $hdr(X-RTP-Stat);
		$var(CS) = 0;
		$var(PS) = 0;
		$var(ES) = 0;
		$var(OS) = 0;
		$var(NPS) = 0;
		$var(SPS) = 0;
		$var(SO) = 0;
		$var(QS) = 0;
		$var(PR) = 0;
		$var(ER) = 0;
		$var(OR) = 0;
		$var(NPR) = 0;
		$var(SR) = 0;
		$var(QR) = 0;
		$var(PLR) = 0;
		$var(PLS) = 0;
		$var(BL) = 0;
		$var(LS) = 0;
		$var(RBDU) = 0;
		$var(RBDE) = 0;
		$var(SBDU) = 0;
		$var(SBDE) = 0;
		$var(EN) = "";
		$var(DE) = "";
		$var(JIR) = 0;
		$var(JIS) = 0;
		$var(DLME) = 0;
		$var(DLMI) = 0;
		$var(DLMA) = 0;
		$var(LIP) = "";
		$var(RIP) = "";
		$var(DQ) = 0;
		$var(DSS) = 0;
		$var(DS) = 0;
		$var(PLCS) = 0;
		$var(JS) = 0;
		$var(RLoss) = 0;
		$var(ELACY) = 0;
		$var(RVal) = 0;
		$var(MOS) = 0;

		if($var(XHEAD) =~ ".*CS=[0-9]") $var(CS) = $(var(XHEAD){re.subst,/.*CS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PS=[0-9]") $var(PS) = $(var(XHEAD){re.subst,/.*PS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*ES=[0-9]") $var(ES) = $(var(XHEAD){re.subst,/.*ES=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*OS=[0-9]") $var(OS) = $(var(XHEAD){re.subst,/.*OS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*SP=[0-9]") $var(NPS) = $(var(XHEAD){re.subst,/.*SP=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*SP=[0-9]") $var(SPS) = $(var(XHEAD){re.subst,/.*SP=([0-9]+)\/([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*SO=[0-9]") $var(SO) = $(var(XHEAD){re.subst,/.*SO=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*QS=[0-9]|[\-]") $var(QS) = $(var(XHEAD){re.subst,/.*QS=([0-9]|[\-]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PR=[0-9]") $var(PR) = $(var(XHEAD){re.subst,/.*PR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*ER=[0-9]") $var(ER) = $(var(XHEAD){re.subst,/.*ER=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*OR=[0-9]") $var(OR) = $(var(XHEAD){re.subst,/.*OR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*CR=[0-9]") $var(NPR) = $(var(XHEAD){re.subst,/.*CR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*SR=[0-9]") $var(SR) = $(var(XHEAD){re.subst,/.*SR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*QR=[0-9]|[\-]") $var(QR) = $(var(XHEAD){re.subst,/.*QR=([0-9]|[\-]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PL=[0-9]") $var(PLR) = $(var(XHEAD){re.subst,/.*PL=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PL=[0-9]") $var(PLS) = $(var(XHEAD){re.subst,/.*PL=([0-9]+)\,([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*BL=[0-9]") $var(BL) = $(var(XHEAD){re.subst,/.*BL=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*LS=[0-9]") $var(LS) = $(var(XHEAD){re.subst,/.*LS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*RB=[0-9]|[\-]") $var(RBDU) = $(var(XHEAD){re.subst,/.*RB=([0-9]+|[\-]).*$/\1/s});
		if($var(XHEAD) =~ ".*RB=[0-9]|[\-]") $var(RBDE) = $(var(XHEAD){re.subst,/.*RB=([0-9]+|[\-])\/([0-9]|[\-]+).*$/\2/s});
		if($var(XHEAD) =~ ".*SB=[0-9]|[\-]") $var(SBDU) = $(var(XHEAD){re.subst,/.*SB=([0-9]+|[\-]).*$/\1/s});
		if($var(XHEAD) =~ ".*SB=[0-9]|[\-]") $var(SBDE) = $(var(XHEAD){re.subst,/.*SB=([0-9]+|[\-])\/([0-9]|[\-]+).*$/\2/s});
		if($var(XHEAD) =~ ".*EN=[A-Za-z0-9]") $var(EN) = $(var(XHEAD){re.subst,/.*EN=([A-Za-z0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*DE=[A-Za-z0-9]") $var(DE) = $(var(XHEAD){re.subst,/.*DE=([A-Za-z0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*JI=[0-9]") $var(JIR) = $(var(XHEAD){re.subst,/.*JI=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*JI=[0-9]") $var(JIS) = $(var(XHEAD){re.subst,/.*JI=([0-9]+)\,([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*DL=[0-9]") $var(DLME) = $(var(XHEAD){re.subst,/.*DL=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*DL=[0-9]") $var(DLMI) = $(var(XHEAD){re.subst,/.*DL=([0-9]+)\,([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*DL=[0-9]") $var(DLMA) = $(var(XHEAD){re.subst,/.*DL=([0-9]+)\,([0-9]+)\,([0-9]+).*$/\3/s});
		if($var(XHEAD) =~ ".*IP=[0-9]") $var(LIP) = $(var(XHEAD){re.subst,/.*IP=([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*$/\1/s});
		if($var(XHEAD) =~ ".*IP=[0-9]") $var(RIP) = $(var(XHEAD){re.subst,/.*IP=([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\:[0-9]+)\,([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*$/\2/s});
		if ($var(QS) == "-") $var(QS) = 0;
		if ($var(QR) == "-") $var(QR) = 0;
		if ($var(RBDU) == "-") $var(RBDU) = 0;
		if ($var(RBDE) == "-") $var(RBDE) = 0;
		if ($var(SBDU) == "-") $var(SBDU) = 0;
		if ($var(SBDE) == "-") $var(SBDE) = 0;

		# Since kamailio core cannot handle float values we shift them by 10^3
		$var(RLoss) = ((($var(PLR) + $var(PLS)) * 250000) / ($var(PS) + $var(PR)));
		$var(ELACY) = ((($var(JIR) * 2) + $var(DLMI) + 20) * 1000);

		if ($var(ELACY) < 160000) {
			$var(RVal) = (93200 - ($var(ELACY) / 40));
		}
		else {
			$var(RVal) = (93200 - (($var(ELACY) - 120000) / 10));
		}

		$var(RVal) = $var(RVal) - $var(RLoss);
		$var(MOS1) = ((($var(RVal) / 1000) * 35) + 1000);
		$var(MOS2) = (100000 - $var(RVal)) * ($var(RVal) - 60000);
		$var(MOS3) = $var(MOS2) / 142857;
		$var(MOS4) = ($var(MOS3) * $var(RVal)) / 1000000;
		$var(MOS) = $var(MOS1) + $var(MOS4);

		#xlog("R=$var(RVal) MOS1=$var(MOS1) MOS2=$var(MOS2) MOS3=$var(MOS3) MOS4=$var(MOS4) MOS=$var(MOS)");

		if ($var(MOS) < 1000) $var(MOS) = 1000;

		if($hdr(X-RTP-Stat-Add) != $null){
			$var(XADD) = $hdr(X-RTP-Stat-Add);
			if($var(XADD) =~ ".*DQ=[0-9]") $var(DQ) = $(var(XADD){re.subst,/.*DQ=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*DSS=[0-9]") $var(DSS) = $(var(XADD){re.subst,/.*DSS=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*DS=[0-9]") $var(DS) = $(var(XADD){re.subst,/.*DS=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*PLCS=[0-9]") $var(PLCS) = $(var(XADD){re.subst,/.*PLCS=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*JS=[0-9]") $var(JS) = $(var(XADD){re.subst,/.*JS=([0-9]+).*$/\1/s});
		}
		jansson_set("string", "host", "$HN(n)", "$var(tmp_json)");
		jansson_set("string", "id", "$ci", "$var(tmp_json)");
		jansson_set("string", "from", "$fU", "$var(tmp_json)");
		jansson_set("string", "to", "$tU", "$var(tmp_json)");
		jansson_set("integer", "callSetupTime", "$var(CS)", "$var(tmp_json)");
		jansson_set("integer", "audioPacketsSent", "$var(PS)", "$var(tmp_json)");
		jansson_set("integer", "expectedPacketsSent", "$var(ES)", "$var(tmp_json)");
		jansson_set("integer", "audioOctetsSent", "$var(OS)", "$var(tmp_json)");
		jansson_set("integer", "comfortNoisePacketsSent", "$var(NPS)", "$var(tmp_json)");
		jansson_set("integer", "silencePacketsSent", "$var(SPS)", "$var(tmp_json)");
		jansson_set("integer", "silenceOctetsSent", "$var(SO)", "$var(tmp_json)");
		jansson_set("integer", "quietPacketsSent", "$var(QS)", "$var(tmp_json)");
		jansson_set("integer", "audioPacketsReceived", "$var(PR)", "$var(tmp_json)");
		jansson_set("integer", "expectedPacketsReceived", "$var(ER)", "$var(tmp_json)");
		jansson_set("integer", "audioOctetsReceived", "$var(OR)", "$var(tmp_json)");
		jansson_set("integer", "comfortNoisePacketsReceived", "$var(NPR)", "$var(tmp_json)");
		jansson_set("integer", "comfortNoiseOctetsReceived", "$var(SR)", "$var(tmp_json)");
		jansson_set("integer", "quietPacketsReceived", "$var(QR)", "$var(tmp_json)");
		jansson_set("integer", "receivePacketsLost", "$var(PLR)", "$var(tmp_json)");
		jansson_set("integer", "sendPacketsLost", "$var(PLS)", "$var(tmp_json)");
		jansson_set("integer", "receiveMaxBurstLost", "$var(BL)", "$var(tmp_json)");
		jansson_set("integer", "numLostSequences", "$var(LS)", "$var(tmp_json)");
		jansson_set("integer", "receiveBurstDuration", "$var(RBDU)", "$var(tmp_json)");
		jansson_set("integer", "receiveBurstDensity", "$var(RBDE)", "$var(tmp_json)");
		jansson_set("integer", "sendBurstDuration", "$var(SBDU)", "$var(tmp_json)");
		jansson_set("integer", "sendBurstDensity", "$var(SBDE)", "$var(tmp_json)");
		jansson_set("string", "usedEncoder", "$var(EN)", "$var(tmp_json)");
		jansson_set("string", "usedDecoder", "$var(DE)", "$var(tmp_json)");
		jansson_set("integer", "receiveJitter", "$var(JIR)", "$var(tmp_json)");
		jansson_set("integer", "sendJitter", "$var(JIS)", "$var(tmp_json)");
		jansson_set("integer", "rttMean", "$var(DLME)", "$var(tmp_json)");
		jansson_set("integer", "rttMin", "$var(DLMI)", "$var(tmp_json)");
		jansson_set("integer", "rttMax", "$var(DLMA)", "$var(tmp_json)");
		jansson_set("string", "localIP", "$var(LIP)", "$var(tmp_json)");
		jansson_set("string", "remoteIP", "$var(RIP)", "$var(tmp_json)");
		jansson_set("integer", "mos", "$var(MOS)", "$var(tmp_json)");
		jansson_set("integer", "decoderQueue", "$var(DQ)", "$var(tmp_json)");
		jansson_set("integer", "dropSilenceSample", "$var(DSS)", "$var(tmp_json)");
		jansson_set("integer", "dropSamples", "$var(DS)", "$var(tmp_json)");
		jansson_set("integer", "pLCSamples", "$var(PLCS)", "$var(tmp_json)");
		jansson_set("integer", "jitterSamples", "$var(JS)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		jansson_set("string", "timestamp", "$timef(%Y-%m-%dT%TZ)", "$var(tmp_json)");
		$var(xrtp_stats) = $var(xrtp_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(xrtp_stats) = $var(xrtp_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		$var(body) = $var(xrtp_stats);
		route(SEND_ES_DATA);
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$TS+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "xrtp_stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		if($sht(x=>$ci::$tt) == $null) $sht(x=>$ci::$tt) = 0;
		$sht(x=>$ci::$tt) = $sht(x=>$ci::$tt) + 1;
	}
}
#!endif

route[CHECK_STATS] {
	$var(curtime) = $TS;
	$var(gentime) = $var(curtime) - CHECK_TIMER_INTERVAL;

	$var(t_mdate) = "FROM_UNIXTIME(" + $var(curtime) + ", '%Y-%m-%d %H:%i:00')";
	$var(f_mdate) = "FROM_UNIXTIME(" + $var(gentime) + ", '%Y-%m-%d %H:%i:00')";

	$var(isotime) = $timef(%Y-%m-%dT%TZ);
	$var(host) = $HN(n);

	# Methods
	$var(method_stats) = "";
	$var(type) = "method_stats";
	sht_iterator_start("i1", "m");
	while(sht_iterator_next("i1")) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "method", "$shtitkey(i1)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(method_stats) = $var(method_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(method_stats) = $var(method_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "method_stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}
	sht_iterator_end("i1");
	$var(body) = $var(method_stats);
	route(SEND_ES_DATA);

	# Responses
	$var(response_stats) = "";
	$var(type) = "response_stats";
	sht_iterator_start("i1", "r");
	while(sht_iterator_next("i1")) {
		$var(response) = $(shtitkey(i1){s.select,0,:});
		$var(method) = $(shtitkey(i1){s.select,2,:});
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "method", "$var(method)", "$var(tmp_json)");
		jansson_set("string", "response", "$var(response)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(response_stats) = $var(response_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(response_stats) = $var(response_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "response_stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}
	sht_iterator_end("i1");
	$var(body) = $var(response_stats);
	route(SEND_ES_DATA);

	# Calls
	$var(call_stats) = "";
	$var(type) = "call_stats";
	$var(cps) = $shtcn(a=>**);
	sht_iterator_start("i1", "a");
	while(sht_iterator_next("i1")) {
		$var(id) = $(shtitkey(i1){s.select,0,:});
		$var(from) = $(shtitkey(i1){s.select,2,:});
		$var(to) = $(shtitkey(i1){s.select,4,:});
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "id", "$var(id)", "$var(tmp_json)");
		jansson_set("string", "from", "$var(from)", "$var(tmp_json)");
		jansson_set("string", "to", "$var(to)", "$var(tmp_json)");
		jansson_set("integer", "cps", "$var(cps)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(call_stats) = $var(call_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(call_stats) = $var(call_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "call_stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}
	sht_iterator_end("i1");
	$var(body) = $var(call_stats);
	route(SEND_ES_DATA);

	# Warnings
	$var(warning_stats) = "";
	$var(type) = "warning_stats";
	sht_iterator_start("i1", "w");
	while(sht_iterator_next("i1")) {
		$var(name) = $(shtitkey(i1){s.select,0,=});
		$var(id) = $(shtitkey(i1){s.select,1,=});
		$var(response) = $(shtitkey(i1){s.select,2,=});
		$var(from) = $(shtitkey(i1){s.select,3,=});
		$var(to) = $(shtitkey(i1){s.select,4,=});
		$var(ip) = $(shtitkey(i1){s.select,5,=});
		$var(via) = $(shtitkey(i1){s.select,6,=});
		$var(type) = $(shtitkey(i1){s.select,7,=});
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "id", "$var(id)", "$var(tmp_json)");
		jansson_set("string", "response", "$var(response)", "$var(tmp_json)");
		jansson_set("string", "from", "$var(from)", "$var(tmp_json)");
		jansson_set("string", "to", "$var(to)", "$var(tmp_json)");
		jansson_set("string", "ip", "$var(ip)", "$var(tmp_json)");
		jansson_set("string", "via", "$var(via)", "$var(tmp_json)");
		jansson_set("string", "type", "$var(type)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(warning_stats) = $var(warning_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+_stats"\" }}\n";
		$var(warning_stats) = $var(warning_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", ""+$var(name)+"_stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}
	sht_iterator_end("i1");
	$var(body) = $var(warning_stats);
	route(SEND_ES_DATA);

#!ifdef WITH_HOMER_GEO
	$var(geo_stats) = "";
	$var(type) = "geo_stats";

	sht_iterator_start("i1", "g");
	while(sht_iterator_next("i1")) {
		$var(method) = $(shtitkey(i1){s.select,0,=});
		$var(country) = $(shtitkey(i1){s.select,1,=});
		$var(lat) = $(shtitkey(i1){s.select,2,=});
		$var(lon) = $(shtitkey(i1){s.select,3,=});
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "country", "$var(country)", "$var(tmp_json)");
		jansson_set("string", "method", "$var(method)", "$var(tmp_json)");
		jansson_set("string", "location_geo", "$var(lat), $var(lon)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(geo_stats) = $var(geo_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(geo_stats) = $var(geo_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "geo_stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}
	sht_iterator_end("i1");
	$var(body) = $var(geo_stats);
	route(SEND_ES_DATA);
#!endif

	# Key performance metrics
	$var(kpi_stats) = "";
	$var(type) = "kpi_stats";
	$var(asr) = 0;
	$var(ner) = 0;
	$var(scr) = 0;
	$var(sdr) = 0;

	if($sht(m=>INVITE) > 0) {
		if($sht(r=>407::INVITE) == $null) $sht(r=>407::INVITE) = 0;
		if($sht(r=>200::INVITE) == $null) $sht(r=>200::INVITE) = 0;
		if($sht(k=>kpi::bad) == $null) $sht(k=>kpi::bad) = 0;
		if($sht(k=>kpi::isa) == $null) $sht(k=>kpi::isa) = 0;
		if($sht(k=>kpi::sd) == $null) $sht(k=>kpi::sd) = 0;
		$var(d) = $sht(m=>INVITE) - $sht(r=>407::INVITE);
		if($var(d) > 0) {
			$var(asr) = $sht(r=>200::INVITE) * 100 / $var(d);
			$var(ner) = ($sht(r=>200::INVITE) + $sht(k=>kpi::bad)) * 100 / $var(d);
			$var(sdr) = $sht(k=>kpi::sd) * 100 / $var(d);
			if($var(asr) > 100) $var(asr) = 100;
			if($var(asr) < 0) $var(asr) = -1;
			if($var(ner) > 100) $var(ner) = 100;
			if($var(ner) < 0) $var(ner) = -1;
			if($var(sdr) > 100) $var(sdr) = 100;
			if($var(sdr) < 0) $var(sdr) = -1;
		}
	}

	if($shtcn(c=>**) > 0 && $shtcn(j=>**) > 0 ) {
		# completed sessions with bye * 100 / all session invites
		$var(scr) = $shtcn(j=>**) * 100 / $shtcn(c=>**);
		if($var(scr) > 100) $var(scr) = 100;
	}

	jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
	jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
	jansson_set("integer", "asr", "$var(asr)", "$var(tmp_json)");
	jansson_set("integer", "ner", "$var(ner)", "$var(tmp_json)");
	jansson_set("integer", "scr", "$var(scr)", "$var(tmp_json)");
	jansson_set("integer", "sdr", "$var(sdr)", "$var(tmp_json)");

	#!ifdef TO_ELASTIC
	$var(kpi_stats) = $var(kpi_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
	$var(kpi_stats) = $var(kpi_stats) + $var(tmp_json) + "\n";
	$var(tmp_json) = 0;
	#!endif

	#!ifdef TO_GRAYLOG
	jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
	jansson_set("string", "short_message", "kpi_stats", "$var(tmp_json)");
	$var(graylog_json) = $var(tmp_json);
	$var(tmp_json) = 0;
	route(SEND_ES_DATA);
	$var(graylog_json) = 0;
	#!endif

	# Send bulk kpi data
	$var(body) = $var(kpi_stats);
	route(SEND_ES_DATA);

	# Reset hash tables
	sht_reset("a");
	sht_reset("c");
	sht_reset("g");
	sht_reset("j");
	sht_reset("k");
	sht_reset("m");
	sht_reset("r");
	sht_reset("w");
}

route[SEND_ES_DATA] {

	$http_req(suspend) = 0;
	$http_req(method) = "POST";
	$http_req(hdr) = "Content-Type: application/json; charset=UTF-8";

#!ifdef TO_GRAYLOG
	if ($var(graylog_json) == "" || $var(graylog_json) == 0 ) return;
	$var(graylogurl) = "GRAYLOG_GELF_HTTP_URL/gelf";
	http_async_query("$var(graylogurl)", "$var(graylog_json)", "ES_REPLY");
#!else
	if ($var(body) == "") return;
	$var(elasticurl) = "ELASTICSEARCH_URL/_bulk";
	http_async_query("$var(elasticurl)", "$var(body)", "ES_REPLY");
#!endif

}

route[ES_REPLY] {

	if($http_err) {
		xlog("L_CRIT","route[ES_REPLY]: $http_err\n");
	} else {
		xlog("L_INFO", "route[ES_REPLY]: status $http_rs\n");
		xlog("L_INFO", "route[ES_REPLY]: body	$http_rb\n");
	}
}

route[STORE] {

	if($rm == "REGISTER") {
		$var(table) = "sip_capture_registration";
	}
	else if($rm =~ "(INVITE|UPDATE|BYE|ACK|PRACK|REFER|CANCEL)$")
	{
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(NOTIFY)$" && is_present_hf("Event") && $hdr(Event)=~"refer;")
	{
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(INFO)$")
	{
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(OPTIONS)$" )
	{
		$var(table) = "sip_capture_rest";
	}
	else {
		$var(table) = "sip_capture_rest";
	}

	$var(utc) = $utimef(%Y%m%d);
	$var(a) = $var(table) + "_" + $var(utc);
	sip_capture("$var(a)");
}

event_route[sipcapture:request] {
	xlog("received sipcapture request from $si:$sp\r\n");
}
